{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chernysn\\\\Documents\\\\GITHUB_COPIES\\\\MERN_school_dashboard\\\\frontend\\\\src\\\\pages\\\\manageAssignments.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { useStudentsContextHook } from \"../context/hooks/useContextHook\";\nimport { useCoursesContextHook } from \"../context/hooks/useContextHook\";\nimport { useAssignmentsContextHook } from \"../context/hooks/useContextHook\";\nimport { useAuthorizeContextHook } from \"../context/hooks/useContextHook\";\nimport { useGlobalRoleContextHook } from \"../context/hooks/useContextHook\";\nimport AddAssignmentToCourse from \"../components/popupAddAssignmentToCourse\";\nimport LoginPage from \"./loginPage\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ManageAssignments = () => {\n  _s();\n  const {\n    authorize,\n    authorizeDispatch\n  } = useAuthorizeContextHook();\n  const {\n    students,\n    studentDispatch\n  } = useStudentsContextHook();\n  const {\n    allCourses,\n    courseDispatch\n  } = useCoursesContextHook();\n  const {\n    assignments,\n    assignmentDispatch\n  } = useAssignmentsContextHook();\n  const [selectCourse, setSelectCourse] = useState(\"\");\n  const [studentsPerCourse, setStudentsPerCourse] = useState([]);\n  const [thisCourseGrades, setThisCourseGrades] = useState([]);\n  const [collectAssignments, setCollectAssignments] = useState([]);\n  const [editableCell, setEditableCell] = useState(\"false\");\n  const [averageGrades, setAverageGrades] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  useEffect(() => {\n    const fetchCourses = async () => {\n      const response = await fetch(\"/api/courses\");\n      const json = await response.json();\n      if (response.ok) {\n        courseDispatch({\n          type: \"SET_COURSES\",\n          payload: json\n        });\n      } else {\n        console.error(json);\n      }\n    };\n    fetchCourses();\n    const fetchAssignments = async () => {\n      const response = await fetch(\"/api/assignments\");\n      const json = await response.json();\n      if (response.ok) {\n        assignmentDispatch({\n          type: \"SET_ASSIGNMENTS\",\n          payload: json\n        });\n      } else {\n        console.error(json);\n      }\n    };\n    fetchAssignments();\n  }, [courseDispatch, studentDispatch, assignmentDispatch]);\n  const fetchData = async url => {\n    const response = await fetch(url);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(`Failed to fetch data from ${url}. Status: ${response.status}`);\n    }\n    return data;\n  };\n  const handleSelectCourse = async courseId => {\n    try {\n      const courseUrl = `/api/courses/${courseId}`;\n      const studentsUrl = `/api/students/`;\n      const assignmentsUrl = \"/api/assignments\";\n      const gradesUrl = \"/api/grades\";\n      const [course, students, assignments, grades] = await Promise.all([fetchData(courseUrl), fetchData(studentsUrl), fetchData(assignmentsUrl), fetchData(gradesUrl)]);\n      setSelectCourse(course);\n      const studentsInThisCourse = students.filter(student => student.courses.some(course => course._id === courseId));\n      setStudentsPerCourse(studentsInThisCourse);\n      const findAssignments = assignments.filter(assignment => assignment.course === course._id);\n      setCollectAssignments(findAssignments);\n      const assignmentIdsInCourse = findAssignments.map(assignment => assignment._id);\n      const collectCourseGrades = grades.filter(grade => assignmentIdsInCourse.includes(grade.assignment));\n      setThisCourseGrades(collectCourseGrades);\n    } catch (error) {\n      console.error(\"Error in handleSelectCourse:\", error);\n    }\n  };\n  useEffect(() => {\n    if (selectCourse) {\n      handleCalculateAverage(selectCourse);\n    }\n  }, [selectCourse]);\n  const handleEditGrades = () => {\n    setEditableCell(true);\n  };\n  const handleEditGradeScore = async (student, assignment, score) => {\n    const resGrades = await fetch(`/api/grades`);\n    const jsonGrades = await resGrades.json();\n    const thisGrade = jsonGrades.filter(grade => grade.student === student && grade.assignment === assignment);\n    if (thisGrade.length <= 0 && score !== \"\") {\n      const newGrade = {\n        assignment,\n        student,\n        score\n      };\n      const resGradeThis = await fetch(`/api/grades/`, {\n        method: \"POST\",\n        body: JSON.stringify(newGrade),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const jsonGradeThis = await resGradeThis.json();\n      if (!resGradeThis.ok) {\n        console.log(jsonGradeThis.error);\n      } else {\n        console.log(jsonGradeThis, \"new grade created\");\n      }\n    } else if (thisGrade.length > 0 && score !== \"\") {\n      const resGradeThis = await fetch(`/api/grades/${thisGrade[0]._id}`, {\n        method: \"PATCH\",\n        body: JSON.stringify({\n          score: score\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!resGradeThis.ok) {\n        console.log(\"Error updating the grade\");\n      } else {\n        console.log(\"The grade was updated\");\n      }\n    }\n    handleCalculateAverage();\n  };\n  const handleCalculateAverage = async () => {\n    const gradesUrl = \"/api/grades\";\n    const assignmentsUrl = \"/api/assignments\";\n    const [grades, assignments] = await Promise.all([fetchData(gradesUrl), fetchData(assignmentsUrl)]);\n    const assignmentIdsInCourse = assignments.filter(assignment => assignment.course === selectCourse._id).map(assignment => assignment._id);\n    const collectCourseGrades = grades.filter(grade => assignmentIdsInCourse.includes(grade.assignment));\n    const calculateAverageGrades = [];\n    studentsPerCourse.forEach(student => {\n      const allStudentScoresAllAssignments = collectCourseGrades.filter(grade => grade.student === student._id).map(grade => parseFloat(grade.score) ? parseFloat(grade.score) : 0);\n      let avgGrade = 0;\n      if (allStudentScoresAllAssignments.length === 0) {\n        avgGrade = 0;\n      } else {\n        avgGrade = (allStudentScoresAllAssignments.reduce((acc, curr) => acc + curr, 0) / allStudentScoresAllAssignments.length).toFixed(2);\n      }\n      calculateAverageGrades.push({\n        student,\n        avgGrade\n      });\n    });\n    setAverageGrades(calculateAverageGrades);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!authorize && /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/user-login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container grades\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select a course: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"delete-form-page\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => handleSelectCourse(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Select course:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), allCourses && allCourses.map(course => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: course._id,\n            children: course.title\n          }, course._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), selectCourse && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(AddAssignmentToCourse, {\n          title: title,\n          setTitle: setTitle,\n          description: description,\n          setDescription: setDescription,\n          selectCourse: selectCourse,\n          collectAssignments: collectAssignments,\n          assignmentDispatch: assignmentDispatch,\n          handleSelectCourse: handleSelectCourse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectCourse && selectCourse.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"scroll\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"STUDENTS & ASSIGNMENTS\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 21\n                }, this), collectAssignments && collectAssignments.map(assignment => /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: assignment.title\n                }, assignment._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 25\n                }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: \"AVG SCORE\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: studentsPerCourse && studentsPerCourse.map(student => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: student.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 25\n                }, this), collectAssignments.map(assignment => {\n                  var _thisCourseGrades$fin;\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    onClick: () => handleEditGrades(student._id, assignment._id),\n                    onBlur: e => handleEditGradeScore(student._id, assignment._id, e.currentTarget.textContent),\n                    contentEditable: editableCell ? \"true\" : \"false\",\n                    children: ((_thisCourseGrades$fin = thisCourseGrades.find(grade => grade.student === student._id && grade.assignment === assignment._id)) === null || _thisCourseGrades$fin === void 0 ? void 0 : _thisCourseGrades$fin.score) || \"\"\n                  }, `${student._id}-${assignment._id}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 234,\n                    columnNumber: 27\n                  }, this);\n                }), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [averageGrades && averageGrades.filter(avg => avg.student._id === student._id).map(avg => avg.avgGrade), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 25\n                }, this)]\n              }, student._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ManageAssignments, \"ovLrulUrPbIa8EIKzFV0xj/A4HE=\", false, function () {\n  return [useAuthorizeContextHook, useStudentsContextHook, useCoursesContextHook, useAssignmentsContextHook];\n});\n_c = ManageAssignments;\nexport default ManageAssignments;\nvar _c;\n$RefreshReg$(_c, \"ManageAssignments\");","map":{"version":3,"names":["useEffect","useState","Navigate","useStudentsContextHook","useCoursesContextHook","useAssignmentsContextHook","useAuthorizeContextHook","useGlobalRoleContextHook","AddAssignmentToCourse","LoginPage","jsxDEV","_jsxDEV","Fragment","_Fragment","ManageAssignments","_s","authorize","authorizeDispatch","students","studentDispatch","allCourses","courseDispatch","assignments","assignmentDispatch","selectCourse","setSelectCourse","studentsPerCourse","setStudentsPerCourse","thisCourseGrades","setThisCourseGrades","collectAssignments","setCollectAssignments","editableCell","setEditableCell","averageGrades","setAverageGrades","title","setTitle","description","setDescription","fetchCourses","response","fetch","json","ok","type","payload","console","error","fetchAssignments","fetchData","url","data","Error","status","handleSelectCourse","courseId","courseUrl","studentsUrl","assignmentsUrl","gradesUrl","course","grades","Promise","all","studentsInThisCourse","filter","student","courses","some","_id","findAssignments","assignment","assignmentIdsInCourse","map","collectCourseGrades","grade","includes","handleCalculateAverage","handleEditGrades","handleEditGradeScore","score","resGrades","jsonGrades","thisGrade","length","newGrade","resGradeThis","method","body","JSON","stringify","headers","jsonGradeThis","log","calculateAverageGrades","forEach","allStudentScoresAllAssignments","parseFloat","avgGrade","reduce","acc","curr","toFixed","push","children","to","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","e","target","value","name","_thisCourseGrades$fin","onClick","onBlur","currentTarget","textContent","contentEditable","find","avg","_c","$RefreshReg$"],"sources":["C:/Users/chernysn/Documents/GITHUB_COPIES/MERN_school_dashboard/frontend/src/pages/manageAssignments.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { useStudentsContextHook } from \"../context/hooks/useContextHook\";\r\nimport { useCoursesContextHook } from \"../context/hooks/useContextHook\";\r\nimport { useAssignmentsContextHook } from \"../context/hooks/useContextHook\";\r\nimport { useAuthorizeContextHook } from \"../context/hooks/useContextHook\";\r\nimport { useGlobalRoleContextHook } from \"../context/hooks/useContextHook\";\r\nimport AddAssignmentToCourse from \"../components/popupAddAssignmentToCourse\";\r\nimport LoginPage from \"./loginPage\";\r\n\r\nconst ManageAssignments = () => {\r\n  const { authorize, authorizeDispatch } = useAuthorizeContextHook();\r\n  const { students, studentDispatch } = useStudentsContextHook();\r\n  const { allCourses, courseDispatch } = useCoursesContextHook();\r\n  const { assignments, assignmentDispatch } = useAssignmentsContextHook();\r\n  const [selectCourse, setSelectCourse] = useState(\"\");\r\n  const [studentsPerCourse, setStudentsPerCourse] = useState([]);\r\n  const [thisCourseGrades, setThisCourseGrades] = useState([]);\r\n  const [collectAssignments, setCollectAssignments] = useState([]);\r\n  const [editableCell, setEditableCell] = useState(\"false\");\r\n  const [averageGrades, setAverageGrades] = useState([]);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchCourses = async () => {\r\n      const response = await fetch(\"/api/courses\");\r\n      const json = await response.json();\r\n\r\n      if (response.ok) {\r\n        courseDispatch({ type: \"SET_COURSES\", payload: json });\r\n      } else {\r\n        console.error(json);\r\n      }\r\n    };\r\n    fetchCourses();\r\n\r\n    const fetchAssignments = async () => {\r\n      const response = await fetch(\"/api/assignments\");\r\n      const json = await response.json();\r\n\r\n      if (response.ok) {\r\n        assignmentDispatch({ type: \"SET_ASSIGNMENTS\", payload: json });\r\n      } else {\r\n        console.error(json);\r\n      }\r\n    };\r\n    fetchAssignments();\r\n  }, [courseDispatch, studentDispatch, assignmentDispatch]);\r\n\r\n  const fetchData = async (url) => {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\r\n        `Failed to fetch data from ${url}. Status: ${response.status}`\r\n      );\r\n    }\r\n\r\n    return data;\r\n  };\r\n\r\n  const handleSelectCourse = async (courseId) => {\r\n    try {\r\n      const courseUrl = `/api/courses/${courseId}`;\r\n      const studentsUrl = `/api/students/`;\r\n      const assignmentsUrl = \"/api/assignments\";\r\n      const gradesUrl = \"/api/grades\";\r\n\r\n      const [course, students, assignments, grades] = await Promise.all([\r\n        fetchData(courseUrl),\r\n        fetchData(studentsUrl),\r\n        fetchData(assignmentsUrl),\r\n        fetchData(gradesUrl),\r\n      ]);\r\n\r\n      setSelectCourse(course);\r\n\r\n      const studentsInThisCourse = students.filter((student) =>\r\n        student.courses.some((course) => course._id === courseId)\r\n      );\r\n      setStudentsPerCourse(studentsInThisCourse);\r\n\r\n      const findAssignments = assignments.filter(\r\n        (assignment) => assignment.course === course._id\r\n      );\r\n      setCollectAssignments(findAssignments);\r\n\r\n      const assignmentIdsInCourse = findAssignments.map(\r\n        (assignment) => assignment._id\r\n      );\r\n      const collectCourseGrades = grades.filter((grade) =>\r\n        assignmentIdsInCourse.includes(grade.assignment)\r\n      );\r\n      setThisCourseGrades(collectCourseGrades);\r\n    } catch (error) {\r\n      console.error(\"Error in handleSelectCourse:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectCourse) {\r\n      handleCalculateAverage(selectCourse);\r\n    }\r\n  }, [selectCourse]);\r\n\r\n  const handleEditGrades = () => {\r\n    setEditableCell(true);\r\n  };\r\n\r\n  const handleEditGradeScore = async (student, assignment, score) => {\r\n    const resGrades = await fetch(`/api/grades`);\r\n    const jsonGrades = await resGrades.json();\r\n    const thisGrade = jsonGrades.filter(\r\n      (grade) => grade.student === student && grade.assignment === assignment\r\n    );\r\n    if (thisGrade.length <= 0 && score !== \"\") {\r\n      const newGrade = { assignment, student, score };\r\n      const resGradeThis = await fetch(`/api/grades/`, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newGrade),\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n\r\n      const jsonGradeThis = await resGradeThis.json();\r\n\r\n      if (!resGradeThis.ok) {\r\n        console.log(jsonGradeThis.error);\r\n      } else {\r\n        console.log(jsonGradeThis, \"new grade created\");\r\n      }\r\n    } else if (thisGrade.length > 0 && score !== \"\") {\r\n      const resGradeThis = await fetch(`/api/grades/${thisGrade[0]._id}`, {\r\n        method: \"PATCH\",\r\n        body: JSON.stringify({ score: score }),\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n\r\n      if (!resGradeThis.ok) {\r\n        console.log(\"Error updating the grade\");\r\n      } else {\r\n        console.log(\"The grade was updated\");\r\n      }\r\n    }\r\n\r\n    handleCalculateAverage();\r\n  };\r\n\r\n  const handleCalculateAverage = async () => {\r\n    const gradesUrl = \"/api/grades\";\r\n    const assignmentsUrl = \"/api/assignments\";\r\n    const [grades, assignments] = await Promise.all([\r\n      fetchData(gradesUrl),\r\n      fetchData(assignmentsUrl),\r\n    ]);\r\n\r\n    const assignmentIdsInCourse = assignments\r\n      .filter((assignment) => assignment.course === selectCourse._id)\r\n      .map((assignment) => assignment._id);\r\n\r\n    const collectCourseGrades = grades.filter((grade) =>\r\n      assignmentIdsInCourse.includes(grade.assignment)\r\n    );\r\n\r\n    const calculateAverageGrades = [];\r\n    studentsPerCourse.forEach((student) => {\r\n      const allStudentScoresAllAssignments = collectCourseGrades\r\n        .filter((grade) => grade.student === student._id)\r\n        .map((grade) =>\r\n          parseFloat(grade.score) ? parseFloat(grade.score) : 0\r\n        );\r\n      let avgGrade = 0;\r\n      if (allStudentScoresAllAssignments.length === 0) {\r\n        avgGrade = 0;\r\n      } else {\r\n        avgGrade = (\r\n          allStudentScoresAllAssignments.reduce((acc, curr) => acc + curr, 0) /\r\n          allStudentScoresAllAssignments.length\r\n        ).toFixed(2);\r\n      }\r\n      calculateAverageGrades.push({ student, avgGrade });\r\n    });\r\n    setAverageGrades(calculateAverageGrades);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!authorize && <Navigate to=\"/user-login\" />}\r\n      <div className=\"container grades\">\r\n        <h2>Select a course: </h2>\r\n        <div className=\"delete-form-page\">\r\n          <select onChange={(e) => handleSelectCourse(e.target.value)}>\r\n            <option>Select course:</option>\r\n            {allCourses &&\r\n              allCourses.map((course) => (\r\n                <option key={course._id} value={course._id}>\r\n                  {course.title}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n        {selectCourse && (\r\n          <div>\r\n            <AddAssignmentToCourse\r\n              title={title}\r\n              setTitle={setTitle}\r\n              description={description}\r\n              setDescription={setDescription}\r\n              selectCourse={selectCourse}\r\n              collectAssignments={collectAssignments}\r\n              assignmentDispatch={assignmentDispatch}\r\n              handleSelectCourse={handleSelectCourse}\r\n            />\r\n            <h2>{selectCourse && selectCourse.title}</h2>\r\n            <div className=\"scroll\">\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <td>STUDENTS & ASSIGNMENTS</td>\r\n                    {collectAssignments &&\r\n                      collectAssignments.map((assignment) => (\r\n                        <td key={assignment._id}>{assignment.title}</td>\r\n                      ))}\r\n                    <td>AVG SCORE</td>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {studentsPerCourse &&\r\n                    studentsPerCourse.map((student) => (\r\n                      <tr key={student._id}>\r\n                        <td>{student.name}</td>\r\n                        {collectAssignments.map((assignment) => (\r\n                          <td\r\n                            onClick={() =>\r\n                              handleEditGrades(student._id, assignment._id)\r\n                            }\r\n                            onBlur={(e) =>\r\n                              handleEditGradeScore(\r\n                                student._id,\r\n                                assignment._id,\r\n                                e.currentTarget.textContent\r\n                              )\r\n                            }\r\n                            key={`${student._id}-${assignment._id}`}\r\n                            contentEditable={editableCell ? \"true\" : \"false\"}\r\n                          >\r\n                            {thisCourseGrades.find(\r\n                              (grade) =>\r\n                                grade.student === student._id &&\r\n                                grade.assignment === assignment._id\r\n                            )?.score || \"\"}\r\n                          </td>\r\n                        ))}\r\n                        <td>\r\n                          {averageGrades &&\r\n                            averageGrades\r\n                              .filter((avg) => avg.student._id === student._id)\r\n                              .map((avg) => avg.avgGrade)}\r\n                          %\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ManageAssignments;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}